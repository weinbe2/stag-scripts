% Update 08-17-2014, Fix vev issue sort of!
% Update 08-20-2014, Read in flavor count, Ns, Nt from file.
% Update 09-18-2014, Updated for SCC analysis. Do jackknifing right!
function build_correlator_scalar(fname, stoch_src, blocksize)

	% Load ensemble info.
	[fl_l, fl_h, parse_Ns, parse_Nt, beta, m_l, m_h] = load_info_file(fname);

	number_src = stoch_src;
    number_bl = stoch_src;
    volume = parse_Ns^3;
    fl_flavor = fl_l/4; % Because staggered.

	% Build the vev subtracted correlators.
    % load it up!

    [realops config_nums_pbp] = load_pbppart(fname, parse_Nt, number_bl);
	num_data = size(realops, 3);
	num_blocks = floor(num_data/blocksize);
	parse_Nt_in = size(realops, 1);
    num_data_in = size(realops, 3);
    number_bl_in = size(realops, 2);
    number_files_in = size(realops, 4);
	
	% Bin the operators!
	[realops_blocks num_blocks] = block_data(realops, 3, blocksize);
	
	% Rescale the ops so we don't need to multiply D by anything later.
	realops_blocks = realops_blocks.*sqrt(fl_flavor);
	
	% Get a central value for the disconnected correlator.
	disc_sum = zeros(parse_Nt,1);
	
	disc_corr_output = build_vev_correlator(realops_blocks, 1); % fold it.
	
	% Zero out the diagonal terms, then get one answer.
	for i=1:number_src
		disc_corr_output(:,i,i) = 0;
    end
	
    
	disc_sum(:) = sum(sum(disc_corr_output, 2),3)/(number_src*(number_src-1));
	disc_rep = repmat(disc_sum, [1 num_blocks]);
	
	clear('disc_corr_output'); % clean up a bit.
	
	% Get jackknife blocks of the disconnected correlator
	% This is a complicated derived quantity, so we don't just use the block function.
	disc_jack = zeros(parse_Nt, num_blocks);
	for b=1:num_blocks
		% Throw out one block.
		file_conn_copy = realops_blocks;
		file_conn_copy(:,:,b) = [];
		
		% Get the disconnected correlator.
		disc_corrs_output = build_vev_correlator(file_conn_copy, 1); % fold it.
		
		% Zero out the diagonal terms, then get one answer.
		for i=1:number_src
			disc_corrs_output(:,i,i) = 0;
        end
		
		disc_jack(:,b) = sum(sum(disc_corrs_output, 2),3)/(number_src*(number_src-1));
	end
	
	% Get a var-covar matrix and some errors.
	disc_cov_mat = zeros(parse_Nt);
	disc_err = zeros(parse_Nt, 1);
	for t1 = 1:parse_Nt
        for t2 = 1:parse_Nt
            disc_cov_mat(t1,t2) = sum((disc_rep(t1,:)-disc_jack(t1,:)).*(disc_rep(t2,:)-disc_jack(t2,:)),2).*(num_blocks-1)./num_blocks;
            if t1 == t2
                disc_err(t1) = sqrt(disc_cov_mat(t1,t1));
            end
        end
    end

	% Next, load the connected correlator, and play the same game.

	full_fname = strcat(fname, '/spectrum2/stoch/SPECTRUM.dat');
	fd = fopen(full_fname,'rt');
	raw_data = textscan(fd, '%d%d%f', 'Whitespace', ' \t');
	fclose(fd);
	raw_data{1} = double(raw_data{1});
	raw_data{2} = double(raw_data{2});
	raw_data{3} = double(raw_data{3});
    conn_values = cell2mat(raw_data);

    conn_corr = zeros(parse_Nt, num_data);
	config_nums_conn = zeros(1, num_data);
    for i=1:num_data
        for j=1:parse_Nt
            % normalize it.
            conn_corr(j,i) = conn_values((i-1)*parse_Nt+j,3)/(parse_Nt*volume*stoch_src*(stoch_src-1)*0.5);
			config_nums_conn(1,i) = conn_values((i-1)*parse_Nt+j,1);
        end
    end

    connected = conn_corr;
	
	connected_unfolded = connected;

    connected = fold_data(connected, 0); % It's not a baryon!

	% Block data!
	[connected_blocks, num_blocks] = block_data(connected, 2, blocksize);
	
	% Get jackknife blocks and covariance matrix.
	connected_sum = mean(connected_blocks, 2);
	[connected_jack, connected_cov_mat, connected_err] = jackknife_from_blocks(connected_blocks);
	
    % While we're at it, also build sigma.
	
	% We put in the factor of N_f/4 earlier.
	sigma_sum = disc_sum - connected_sum;
	sigma_jack = disc_jack - connected_jack;
	sigma_rep = repmat(sigma_sum, [1 num_blocks]);
	
	% Get a var-covar matrix and some errors.
	sigma_cov_mat = zeros(parse_Nt);
	sigma_err = zeros(parse_Nt, 1);
	for t1 = 1:parse_Nt
        for t2 = 1:parse_Nt
            sigma_cov_mat(t1,t2) = sum((sigma_rep(t1,:)-sigma_jack(t1,:)).*(sigma_rep(t2,:)-sigma_jack(t2,:)),2).*(num_blocks-1)./num_blocks;
            if t1 == t2
                sigma_err(t1) = sqrt(sigma_cov_mat(t1,t1));
            end
        end
    end
	
	% Get some effective masses of D, too!
	[disc_mass_sum, disc_roots_sum, disc_amps_sum] = effective_mass_utility(disc_sum, parse_Nt, 1, 2, 0);
	disc_mass_jack = zeros([size(disc_mass_sum) num_blocks]);
	for b=1:num_blocks
		[ disc_mass_jack(:,:, b), ~, ~] = effective_mass_utility(disc_jack(:,b), parse_Nt, 1, 2, 0);
	end
	disc_mass_rep = repmat(disc_mass_sum, [1 1 num_blocks]);
	disc_mass_err = sqrt(sum((disc_mass_rep-disc_mass_jack).^2, 3).*(num_blocks-1)/(num_blocks));
	

	% Save some things!

    conn_output = zeros(num_data_in*parse_Nt_in, 3);
    for i=1:parse_Nt_in
        for j=1:num_data_in
			conn_output((j-1)*parse_Nt_in+i, 1) = config_nums_conn(1,j);
            conn_output((j-1)*parse_Nt_in+i, 2) = i-1;
            conn_output((j-1)*parse_Nt_in+i, 3) = connected_unfolded(i,j);
		end
	end
	full_fname = strcat(fname, '/spectrum2/corr/corr.sc_stoch');
    save(full_fname, 'conn_output', '-ascii');

    % Also spit out some sums.
    data = zeros(parse_Nt/2+1,3);
    for i=1:(parse_Nt/2+1)
        data(i,1) = i-1;
        data(i,2) = connected_sum(i);
        data(i,3) = connected_err(i);
    end

	full_fname = strcat(fname, '/spectrum2/sum/sum.sc_stoch');
    save(full_fname,'data','-ascii');

    data = zeros(parse_Nt/2+1,3);
    for i=1:(parse_Nt/2+1)
        data(i,1) = i-1;
        data(i,2) = disc_sum(i);
        data(i,3) = disc_err(i);
    end

	full_fname = strcat(fname, '/spectrum2/sum/sum.dc_stoch');
    save(full_fname,'data','-ascii');

    data = zeros(parse_Nt/2+1,3);
    for i=1:(parse_Nt/2+1)
        data(i,1) = i-1;
        data(i,2) = sigma_sum(i);
        data(i,3) = sigma_err(i);
    end

	full_fname = strcat(fname, '/spectrum2/sum/sum.sg_stoch');
    save(full_fname,'data','-ascii');
	
	% Spit out effective masses.
	
	raw_output = zeros(size(disc_mass_err,1), 3);
	for j=1:(size(disc_mass_err,1))
		raw_output(j,1) = j-1+((3-1)/2);
		raw_output(j,2) = real(disc_mass_sum(j, 1));
		raw_output(j,3) = real(disc_mass_err(j, 1));
	end
	full_fname = strcat(fname, '/spectrum2/effmass/effmass.dc_stoch', num2str(1));

	save(full_fname, 'raw_output', '-ascii');
    
    
end

